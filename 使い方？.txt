リポジトリ　Gitで管理するファイルのまとまり
コミット　データの変更・追加・削除を記録すること。
　コミットすることで前のverに戻れたり。ver間の違いが分かりやすくなったり
・リポジトリの中のファイルは二種類
trached file 追跡されているファイル。Gitで履歴を管理している
untracked file 追跡されていないファイル

ブランチ　履歴を枝分かれ、分岐させるもの
　ベースとなるファイル群から分離させて別名した感じ
　ベースとなるファイル群をmain　masterブランチという
マージ　ブランチから別のブランチに変更点を融合させること
　複数人で開発するからmainブランチにマージしてすべてを寄せていく。
コンフリクト　マージの時に名前が衝突して上書き消滅すること。

～コマンド～
cd カレントディレクトリに移動
mkdir　ディレクトリを作る
git init 初期化。リポジトリ作るときにまず一回やる
git status リポジトリの状態を見る
git add ファイル名　ファイルをコミットするものとして予約
 git add . 今いるディレクトリ以下全てをaddする
git commit -m "コメント" addしたファイルをコミットする。必ずコメントを書く
git log 今のブランチのコミットの履歴を見る


～アップロード手順～
01.Git Hubの方でリポジトリを作っておく
02.コマンドプロンプト　cdでディレクトリに移動
03.git init でローカルリポジトリとして初期化
04.そのディレクトリにアップしたいデータをフォルダ事コピペ
05.git add . で丸ごとコミット予約
06.git status でtracked fileになっているか確認できる
07.git commit -m "コメント"　で予約したものをコミット＆コメントも書く
08.git remote add origin http～～　でGitHub内に作ったリポジトリを指定
09.アップロード完了



ワークツリー　→add→　ステージ　→commit→　リポジトリ（記録）
git add . .のところにファイル名、"."は全部変更ファイル
git commit -m "コミットのメッセージ、変更内容の説明など"　
status　変更ファイルのチェック
diff　変更内容をチェック

git diff　リポジトリとワークツリーの差分のチェック
git diff -staged　リポジトリとステージの差分をチェック
git status 変更ファイルを確認